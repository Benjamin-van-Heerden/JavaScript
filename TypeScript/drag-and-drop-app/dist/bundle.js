(()=>{"use strict";class e{constructor(e,t,r,n){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,n&&(this.element.id=n),this.attach(r)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}const t=e=>{let t=!0;return e.required&&(t=t&&0!=e.value.toString().trim().length),e.minLength&&(t=t&&e.value.toString().trim().length>=e.minLength),e.maxLength&&(t=t&&e.value.toString().trim().length<=e.maxLength),t},r=(e,t,r)=>{const n=r.value;return{configurable:!0,get(){return n.bind(this)}}};var n;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(n||(n={}));class s{constructor(e,t,r,n,s){this.id=e,this.title=t,this.description=r,this.people=n,this.status=s}}class i extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}addProject(e,t,r){const i=new s(Math.random().toString(),e,t,r,n.Active);this.projects.push(i),this.updateListeners()}moveProject(e,t){const r=this.projects.find((t=>t.id==e));r&&r.status!=t&&(r.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const o=i.getInstance();class l extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleInput=this.element.querySelector("#title"),this.descriptionInput=this.element.querySelector("#description"),this.peopleInput=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInput.value,r=this.descriptionInput.value,n=this.peopleInput.value,s={value:r,required:!0},i={value:+n,required:!0};return t({value:e,required:!0})&&t(s)&&t(i)?[e,r,+n]:void alert("Invalid input, please try again!")}clearInput(){this.titleInput.value="",this.descriptionInput.value="",this.peopleInput.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,r,n]=t;o.addProject(e,r,n),this.clearInput()}}}!function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);i>3&&o&&Object.defineProperty(t,r,o)}([r],l.prototype,"submitHandler",null);var a=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class c extends e{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1==this.project.people?`${this.project.people} person`:`${this.project.people} persons`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("DragEnd")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}a([r],c.prototype,"dragStartHandler",null),a([r],c.prototype,"dragEndHandler",null);var d=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class p extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"==e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");o.moveProject(t,"Active"==this.type?n.Active:n.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),o.addListener((e=>{const t=e.filter((e=>"Active"==this.type?e.status==n.Active:e.status==n.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type+" Projects"}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new c(this.element.querySelector("ul").id,e)}}d([r],p.prototype,"dragOverHandler",null),d([r],p.prototype,"dropHandler",null),d([r],p.prototype,"dragLeaveHandler",null),new l,new p("Active"),new p("Finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDTyxNQUFlQSxFQUtsQkMsWUFBWUMsRUFBb0JDLEVBQXVCQyxFQUF3QkMsR0FDM0VDLEtBQUtDLGdCQUFrQkMsU0FBU0MsZUFBZVAsR0FDL0NJLEtBQUtJLFlBQWNGLFNBQVNDLGVBQWVOLEdBRTNDLE1BQU1RLEVBQWVILFNBQVNJLFdBQVdOLEtBQUtDLGdCQUFnQk0sU0FBUyxHQUN2RVAsS0FBS1EsUUFBVUgsRUFBYUksa0JBQ3hCVixJQUNBQyxLQUFLUSxRQUFRRSxHQUFLWCxHQUd0QkMsS0FBS1csT0FBT2IsR0FHUmEsT0FBT2IsR0FDWEUsS0FBS0ksWUFBWVEsc0JBQXNCZCxFQUFnQixhQUFlLFlBQWFFLEtBQUtRLFVDWHpGLE1BQU1LLEVBQVlDLElBQ3JCLElBQUlDLEdBQVUsRUFVZCxPQVRJRCxFQUFrQkUsV0FDbEJELEVBQVVBLEdBQStELEdBQXBERCxFQUFrQkcsTUFBTUMsV0FBV0MsT0FBT0MsUUFFL0ROLEVBQWtCTyxZQUNsQk4sRUFBVUEsR0FBV0QsRUFBa0JHLE1BQU1DLFdBQVdDLE9BQU9DLFFBQVVOLEVBQWtCTyxXQUUzRlAsRUFBa0JRLFlBQ2xCUCxFQUFVQSxHQUFXRCxFQUFrQkcsTUFBTUMsV0FBV0MsT0FBT0MsUUFBVU4sRUFBa0JRLFdBRXhGUCxHQ2xCRVEsRUFBVyxDQUFDQyxFQUFjQyxFQUFZQyxLQUMvQyxNQUFNQyxFQUFpQkQsRUFBV1QsTUFRbEMsTUFQMEMsQ0FDdENXLGNBQWMsRUFDZEMsTUFFSSxPQURnQkYsRUFBZUcsS0FBSzlCLFNDTGhELElBQVkrQixHQUFaLFNBQVlBLEdBQ1IsdUJBQ0EsMkJBRkosQ0FBWUEsSUFBQUEsRUFBYSxLQUtsQixNQUFNQyxFQUNUckMsWUFDV2UsRUFDQXVCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBSkEsS0FBQTFCLEdBQUFBLEVBQ0EsS0FBQXVCLE1BQUFBLEVBQ0EsS0FBQUMsWUFBQUEsRUFDQSxLQUFBQyxPQUFBQSxFQUNBLEtBQUFDLE9BQUFBLEdDR1IsTUFBTUMsVUFSYixvQkFDYyxLQUFBQyxVQUEyQixHQUVyQ0MsWUFBWUMsR0FDUnhDLEtBQUtzQyxVQUFVRyxLQUFLRCxLQVF4QixjQUNJRSxRQUpJLEtBQUFDLFNBQXNCLEdBTzlCLHFCQUNJLE9BQUkzQyxLQUFLNEMsV0FHVDVDLEtBQUs0QyxTQUFXLElBQUlQLEdBRlRyQyxLQUFLNEMsU0FNcEJDLFdBQVdaLEVBQWVDLEVBQXFCWSxHQUMzQyxNQUFNQyxFQUFhLElBQUlmLEVBQVFnQixLQUFLQyxTQUFTL0IsV0FBWWUsRUFBT0MsRUFBYVksRUFBYWYsRUFBY21CLFFBQ3hHbEQsS0FBSzJDLFNBQVNGLEtBQUtNLEdBQ25CL0MsS0FBS21ELGtCQUdUQyxZQUFZQyxFQUFtQkMsR0FDM0IsTUFBTUMsRUFBVXZELEtBQUsyQyxTQUFTYSxNQUFNQyxHQUFRQSxFQUFJL0MsSUFBTTJDLElBQ2xERSxHQUFXQSxFQUFRbkIsUUFBVWtCLElBQzdCQyxFQUFRbkIsT0FBU2tCLEVBQ2pCdEQsS0FBS21ELG1CQUlMQSxrQkFDSixJQUFLLE1BQU1YLEtBQWN4QyxLQUFLc0MsVUFDMUJFLEVBQVd4QyxLQUFLMkMsU0FBU2UsVUFLOUIsTUFBTUMsRUFBZXRCLEVBQWF1QixjQzlDbEMsTUFBTUMsVUFBcUJuRSxFQUs5QkMsY0FDSStDLE1BQU0sZ0JBQWlCLE9BQU8sRUFBTSxjQUVwQzFDLEtBQUs4RCxXQUFhOUQsS0FBS1EsUUFBUXVELGNBQWMsVUFDN0MvRCxLQUFLZ0UsaUJBQW1CaEUsS0FBS1EsUUFBUXVELGNBQWMsZ0JBQ25EL0QsS0FBS2lFLFlBQWNqRSxLQUFLUSxRQUFRdUQsY0FBYyxXQUU5Qy9ELEtBQUtrRSxZQUdUQSxZQUNJbEUsS0FBS1EsUUFBUTJELGlCQUFpQixTQUFVbkUsS0FBS29FLGVBR2pEQyxpQkFFUUMsa0JBQ0osTUFBTUMsRUFBZXZFLEtBQUs4RCxXQUFXN0MsTUFDL0J1RCxFQUFxQnhFLEtBQUtnRSxpQkFBaUIvQyxNQUMzQ3dELEVBQWdCekUsS0FBS2lFLFlBQVloRCxNQU1qQ3lELEVBQW1DLENBQ3JDekQsTUFBT3VELEVBQ1B4RCxVQUFVLEdBRVIyRCxFQUE4QixDQUNoQzFELE9BQVF3RCxFQUNSekQsVUFBVSxHQUdkLE9BQUtILEVBYjhCLENBQy9CSSxNQUFPc0QsRUFDUHZELFVBQVUsS0FXbUJILEVBQVM2RCxJQUF5QjdELEVBQVM4RCxHQUlqRSxDQUFDSixFQUFjQyxHQUFxQkMsUUFIM0NHLE1BQU0sb0NBT05DLGFBQ0o3RSxLQUFLOEQsV0FBVzdDLE1BQVEsR0FDeEJqQixLQUFLZ0UsaUJBQWlCL0MsTUFBUSxHQUM5QmpCLEtBQUtpRSxZQUFZaEQsTUFBUSxHQUlyQm1ELGNBQWNVLEdBQ2xCQSxFQUFNQyxpQkFDTixNQUFNQyxFQUFZaEYsS0FBS3NFLGtCQUN2QixHQUFJVyxNQUFNQyxRQUFRRixHQUFZLENBQzFCLE1BQU8vQyxFQUFPa0QsRUFBTWhELEdBQVU2QyxFQUM5QnJCLEVBQWFkLFdBQVdaLEVBQU9rRCxFQUFNaEQsR0FDckNuQyxLQUFLNkUsZ0IsMFRBTmIsRUFEQ3RELEcsNFdDdERFLE1BQU02RCxVQUFvQjFGLEVBTzdCQyxZQUFZMEYsRUFBZ0I5QixHQUN4QmIsTUFBTSxpQkFBa0IyQyxHQUFRLEVBQU85QixFQUFRN0MsSUFDL0NWLEtBQUt1RCxRQUFVQSxFQUVmdkQsS0FBS2tFLFlBQ0xsRSxLQUFLcUUsZ0JBVFQsY0FDSSxPQUE4QixHQUF2QnJFLEtBQUt1RCxRQUFRcEIsT0FBYyxHQUFHbkMsS0FBS3VELFFBQVFwQixnQkFBa0IsR0FBR25DLEtBQUt1RCxRQUFRcEIsaUJBWXhGbUQsaUJBQWlCUixHQUNiQSxFQUFNUyxhQUFjQyxRQUFRLGFBQWN4RixLQUFLdUQsUUFBUTdDLElBQ3ZEb0UsRUFBTVMsYUFBY0UsY0FBZ0IsT0FJeENDLGVBQWVDLEdBQ1hDLFFBQVFDLElBQUksV0FHaEIzQixZQUNJbEUsS0FBS1EsUUFBUTJELGlCQUFpQixZQUFhbkUsS0FBS3NGLGtCQUNoRHRGLEtBQUtRLFFBQVEyRCxpQkFBaUIsVUFBV25FLEtBQUswRixnQkFHbERyQixnQkFDSXJFLEtBQUtRLFFBQVF1RCxjQUFjLE1BQU8rQixZQUFjOUYsS0FBS3VELFFBQVF0QixNQUM3RGpDLEtBQUtRLFFBQVF1RCxjQUFjLE1BQU8rQixZQUFjOUYsS0FBSytGLFFBQVUsWUFDL0QvRixLQUFLUSxRQUFRdUQsY0FBYyxLQUFNK0IsWUFBYzlGLEtBQUt1RCxRQUFRckIsYUFsQmhFLEdBRENYLEcscUNBT0QsR0FEQ0EsRyw2V0NsQkUsTUFBTXlFLFVBQW9CdEcsRUFHN0JDLFlBQW9Cc0csR0FDaEJ2RCxNQUFNLGVBQWdCLE9BQU8sRUFBTyxHQUFHdUQsY0FEdkIsS0FBQUEsS0FBQUEsRUFFaEJqRyxLQUFLa0csaUJBQW1CLEdBRXhCbEcsS0FBS2tFLFlBQ0xsRSxLQUFLcUUsZ0JBSVQ4QixnQkFBZ0JyQixHQUNSQSxFQUFNUyxjQUErQyxjQUEvQlQsRUFBTVMsYUFBYWEsTUFBTSxLQUMvQ3RCLEVBQU1DLGlCQUNTL0UsS0FBS1EsUUFBUXVELGNBQWMsTUFDbkNzQyxVQUFVQyxJQUFJLGNBSzdCQyxZQUFZekIsR0FDUixNQUFNMEIsRUFBUzFCLEVBQU1TLGFBQWNrQixRQUFRLGNBQzNDOUMsRUFBYVAsWUFBWW9ELEVBQXFCLFVBQWJ4RyxLQUFLaUcsS0FBbUJsRSxFQUFjbUIsT0FBU25CLEVBQWMyRSxVQUlsR0MsaUJBQWlCaEIsR0FDRTNGLEtBQUtRLFFBQVF1RCxjQUFjLE1BQ25Dc0MsVUFBVU8sT0FBTyxhQUc1QjFDLFlBQ0lsRSxLQUFLUSxRQUFRMkQsaUJBQWlCLFdBQVluRSxLQUFLbUcsaUJBQy9DbkcsS0FBS1EsUUFBUTJELGlCQUFpQixZQUFhbkUsS0FBSzJHLGtCQUNoRDNHLEtBQUtRLFFBQVEyRCxpQkFBaUIsT0FBUW5FLEtBQUt1RyxhQUUzQzVDLEVBQWFwQixhQUFhSSxJQUN0QixNQUFNa0UsRUFBbUJsRSxFQUFTbUUsUUFBUXJELEdBQ3JCLFVBQWJ6RCxLQUFLaUcsS0FDRXhDLEVBQUlyQixRQUFVTCxFQUFjbUIsT0FFaENPLEVBQUlyQixRQUFVTCxFQUFjMkUsV0FFdkMxRyxLQUFLa0csaUJBQW1CVyxFQUN4QjdHLEtBQUsrRyxvQkFJYjFDLGdCQUNJLE1BQU0yQyxFQUFTLEdBQUdoSCxLQUFLaUcscUJBQ3ZCakcsS0FBS1EsUUFBUXVELGNBQWMsTUFBT3JELEdBQUtzRyxFQUN2Q2hILEtBQUtRLFFBQVF1RCxjQUFjLE1BQU8rQixZQUFjOUYsS0FBS2lHLEtBQU8sWUFHeERjLGlCQUNXN0csU0FBU0MsZUFBZSxHQUFHSCxLQUFLaUcsc0JBQ3hDZ0IsVUFBWSxHQUNuQixJQUFLLE1BQU1DLEtBQVdsSCxLQUFLa0csaUJBQ3ZCLElBQUlkLEVBQVlwRixLQUFLUSxRQUFRdUQsY0FBYyxNQUFPckQsR0FBSXdHLElBL0M5RCxHQURDM0YsRyxvQ0FVRCxHQURDQSxHLGdDQU9ELEdBRENBLEcscUNDL0JMLElBQUlzQyxFQUNKLElBQUltQyxFQUFZLFVBQ2hCLElBQUlBLEVBQVksYSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyYWctZHJvcC1hcHAvLi9zcmMvY29tcG9uZW50cy9iYXNlQ29tcG9uZW50LnRzIiwid2VicGFjazovL2RyYWctZHJvcC1hcHAvLi9zcmMvdXRpbC92YWxpZGF0aW9uLnRzIiwid2VicGFjazovL2RyYWctZHJvcC1hcHAvLi9zcmMvZGVjb3JhdG9ycy9hdXRvYmluZC50cyIsIndlYnBhY2s6Ly9kcmFnLWRyb3AtYXBwLy4vc3JjL21vZGVscy9wcm9qZWN0LnRzIiwid2VicGFjazovL2RyYWctZHJvcC1hcHAvLi9zcmMvc3RhdGUvcHJvamVjdFN0YXRlLnRzIiwid2VicGFjazovL2RyYWctZHJvcC1hcHAvLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0SW5wdXQudHMiLCJ3ZWJwYWNrOi8vZHJhZy1kcm9wLWFwcC8uL3NyYy9jb21wb25lbnRzL3Byb2plY3RJdGVtLnRzIiwid2VicGFjazovL2RyYWctZHJvcC1hcHAvLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0TGlzdC50cyIsIndlYnBhY2s6Ly9kcmFnLWRyb3AtYXBwLy4vc3JjL2FwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb21wb25lbnQgQmFzZSBDbGFzc1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudDxUIGV4dGVuZHMgSFRNTEVsZW1lbnQsIFUgZXh0ZW5kcyBIVE1MRWxlbWVudD4ge1xuICAgIHRlbXBsYXRlRWxlbWVudDogSFRNTFRlbXBsYXRlRWxlbWVudDtcbiAgICBob3N0RWxlbWVudDogVDtcbiAgICBlbGVtZW50OiBVO1xuXG4gICAgY29uc3RydWN0b3IodGVtcGxhdGVJZDogc3RyaW5nLCBob3N0RWxlbWVudElkOiBzdHJpbmcsIGluc2VydEF0U3RhcnQ6IGJvb2xlYW4sIG5ld0VsZW1lbnRJZD86IHN0cmluZykge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRlbXBsYXRlSWQpISBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xuICAgICAgICB0aGlzLmhvc3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaG9zdEVsZW1lbnRJZCkhIGFzIFQ7XG5cbiAgICAgICAgY29uc3QgaW1wb3J0ZWRIdG1sID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlRWxlbWVudC5jb250ZW50LCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gaW1wb3J0ZWRIdG1sLmZpcnN0RWxlbWVudENoaWxkIGFzIFU7XG4gICAgICAgIGlmIChuZXdFbGVtZW50SWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5pZCA9IG5ld0VsZW1lbnRJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXR0YWNoKGluc2VydEF0U3RhcnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXR0YWNoKGluc2VydEF0U3RhcnQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5ob3N0RWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoaW5zZXJ0QXRTdGFydCA/IFwiYWZ0ZXJiZWdpblwiIDogXCJiZWZvcmVlbmRcIiwgdGhpcy5lbGVtZW50KTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBjb25maWd1cmUoKTogdm9pZDtcblxuICAgIGFic3RyYWN0IHJlbmRlckNvbnRlbnQoKTogdm9pZDtcbn1cbiIsIi8vIHZhbGlkYXRpb24gbG9naWNcblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0YWJsZSB7XG4gICAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgICByZXF1aXJlZD86IGJvb2xlYW47XG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlID0gKHZhbGlkYXRlYWJsZUlucHV0OiBWYWxpZGF0YWJsZSk6IGJvb2xlYW4gPT4ge1xuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBpZiAodmFsaWRhdGVhYmxlSW5wdXQucmVxdWlyZWQpIHtcbiAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGVhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoICE9IDA7XG4gICAgfVxuICAgIGlmICh2YWxpZGF0ZWFibGVJbnB1dC5taW5MZW5ndGgpIHtcbiAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGVhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID49IHZhbGlkYXRlYWJsZUlucHV0Lm1pbkxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHZhbGlkYXRlYWJsZUlucHV0Lm1heExlbmd0aCkge1xuICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0ZWFibGVJbnB1dC52YWx1ZS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPD0gdmFsaWRhdGVhYmxlSW5wdXQubWF4TGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gaXNWYWxpZDtcbn07XG4iLCIvLyBhdXRvYmluZCBkZWNvcmF0b3JcblxuZXhwb3J0IGNvbnN0IEF1dG9iaW5kID0gKF90YXJnZXQ6IGFueSwgXzI6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIGNvbnN0IGFkakRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCBib3VuZEZuID0gb3JpZ2luYWxNZXRob2QuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBib3VuZEZuO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGFkakRlc2NyaXB0b3I7XG59O1xuIiwiLy8gUHJvamVjdCBUeXBlXG5cbmV4cG9ydCBlbnVtIFByb2plY3RTdGF0dXMge1xuICAgIEFjdGl2ZSxcbiAgICBGaW5pc2hlZCxcbn1cblxuZXhwb3J0IGNsYXNzIFByb2plY3Qge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgaWQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgcGVvcGxlOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBzdGF0dXM6IFByb2plY3RTdGF0dXNcbiAgICApIHt9XG59XG4iLCIvLyBMaXN0ZW5lciBUeXBlXG5cbmltcG9ydCB7IFByb2plY3QsIFByb2plY3RTdGF0dXMgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcblxudHlwZSBMaXN0ZW5lcjxUPiA9IChpdGVtczogVFtdKSA9PiB2b2lkO1xuXG4vLyBQcm9qZWN0IFN0YXRlIE1hbmFnZW1lbnRcblxuYWJzdHJhY3QgY2xhc3MgU3RhdGU8VD4ge1xuICAgIHByb3RlY3RlZCBsaXN0ZW5lcnM6IExpc3RlbmVyPFQ+W10gPSBbXTtcblxuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyRm46IExpc3RlbmVyPFQ+KSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXJGbik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdFN0YXRlIGV4dGVuZHMgU3RhdGU8UHJvamVjdD4ge1xuICAgIHByaXZhdGUgcHJvamVjdHM6IFByb2plY3RbXSA9IFtdO1xuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQcm9qZWN0U3RhdGU7XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBQcm9qZWN0U3RhdGUge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBQcm9qZWN0U3RhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgYWRkUHJvamVjdCh0aXRsZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBudW1PZlBlb3BsZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCksIHRpdGxlLCBkZXNjcmlwdGlvbiwgbnVtT2ZQZW9wbGUsIFByb2plY3RTdGF0dXMuQWN0aXZlKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ld1Byb2plY3QpO1xuICAgICAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIG1vdmVQcm9qZWN0KHByb2plY3RJZDogc3RyaW5nLCBuZXdTdGF0dXM6IFByb2plY3RTdGF0dXMpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHRoaXMucHJvamVjdHMuZmluZCgocHJqKSA9PiBwcmouaWQgPT0gcHJvamVjdElkKTtcbiAgICAgICAgaWYgKHByb2plY3QgJiYgcHJvamVjdC5zdGF0dXMgIT0gbmV3U3RhdHVzKSB7XG4gICAgICAgICAgICBwcm9qZWN0LnN0YXR1cyA9IG5ld1N0YXR1cztcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGlzdGVuZXJzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUxpc3RlbmVycygpIHtcbiAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lckZuIG9mIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBsaXN0ZW5lckZuKHRoaXMucHJvamVjdHMuc2xpY2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBwcm9qZWN0U3RhdGUgPSBQcm9qZWN0U3RhdGUuZ2V0SW5zdGFuY2UoKTtcbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL2Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7IHZhbGlkYXRlLCBWYWxpZGF0YWJsZSB9IGZyb20gXCIuLi91dGlsL3ZhbGlkYXRpb25cIjtcbmltcG9ydCB7IEF1dG9iaW5kIH0gZnJvbSBcIi4uL2RlY29yYXRvcnMvYXV0b2JpbmRcIlxuaW1wb3J0IHsgcHJvamVjdFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlL3Byb2plY3RTdGF0ZVwiO1xuXG4vLyBQcm9qZWN0IElucHV0IENsYXNzXG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0SW5wdXQgZXh0ZW5kcyBDb21wb25lbnQ8SFRNTERpdkVsZW1lbnQsIEhUTUxGb3JtRWxlbWVudD4ge1xuICAgIHRpdGxlSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgZGVzY3JpcHRpb25JbnB1dDogSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICBwZW9wbGVJbnB1dDogSFRNTElucHV0RWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcInByb2plY3QtaW5wdXRcIiwgXCJhcHBcIiwgdHJ1ZSwgXCJ1c2VyLWlucHV0XCIpO1xuXG4gICAgICAgIHRoaXMudGl0bGVJbnB1dCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI3RpdGxlXCIpISBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZXNjcmlwdGlvblwiKSEgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICAgICAgdGhpcy5wZW9wbGVJbnB1dCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI3Blb3BsZVwiKSEgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgICAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIH1cblxuICAgIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5zdWJtaXRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZW5kZXJDb250ZW50KCkge31cblxuICAgIHByaXZhdGUgZ2F0aGVyVXNlcklucHV0KCk6IFtzdHJpbmcsIHN0cmluZywgbnVtYmVyXSB8IHZvaWQge1xuICAgICAgICBjb25zdCBlbnRlcmVkVGl0bGUgPSB0aGlzLnRpdGxlSW5wdXQudmFsdWU7XG4gICAgICAgIGNvbnN0IGVudGVyZWREZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb25JbnB1dC52YWx1ZTtcbiAgICAgICAgY29uc3QgZW50ZXJlZFBlb3BsZSA9IHRoaXMucGVvcGxlSW5wdXQudmFsdWU7XG5cbiAgICAgICAgY29uc3QgdGl0bGVWYWxpZGF0ZTogVmFsaWRhdGFibGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogZW50ZXJlZFRpdGxlLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uVmFsaWRhdGU6IFZhbGlkYXRhYmxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IGVudGVyZWREZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwZW9wbGVWYWxpZGF0ZTogVmFsaWRhdGFibGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogK2VudGVyZWRQZW9wbGUsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXZhbGlkYXRlKHRpdGxlVmFsaWRhdGUpIHx8ICF2YWxpZGF0ZShkZXNjcmlwdGlvblZhbGlkYXRlKSB8fCAhdmFsaWRhdGUocGVvcGxlVmFsaWRhdGUpKSB7XG4gICAgICAgICAgICBhbGVydChcIkludmFsaWQgaW5wdXQsIHBsZWFzZSB0cnkgYWdhaW4hXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtlbnRlcmVkVGl0bGUsIGVudGVyZWREZXNjcmlwdGlvbiwgK2VudGVyZWRQZW9wbGVdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhcklucHV0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRpdGxlSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLnBlb3BsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICB9XG5cbiAgICBAQXV0b2JpbmRcbiAgICBwcml2YXRlIHN1Ym1pdEhhbmRsZXIoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IHRoaXMuZ2F0aGVyVXNlcklucHV0KCk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbnN0IFt0aXRsZSwgZGVzYywgcGVvcGxlXSA9IHVzZXJJbnB1dDtcbiAgICAgICAgICAgIHByb2plY3RTdGF0ZS5hZGRQcm9qZWN0KHRpdGxlLCBkZXNjLCBwZW9wbGUpO1xuICAgICAgICAgICAgdGhpcy5jbGVhcklucHV0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9iYXNlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBBdXRvYmluZCB9IGZyb20gXCIuLi9kZWNvcmF0b3JzL2F1dG9iaW5kXCJcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcbmltcG9ydCB7IERyYWdnYWJsZSB9IGZyb20gXCIuLi9tb2RlbHMvZHJhZ0Ryb3BcIjtcblxuLy8gUHJvamVjdCBJdGVtIENsYXNzXG5leHBvcnQgY2xhc3MgUHJvamVjdEl0ZW0gZXh0ZW5kcyBDb21wb25lbnQ8SFRNTFVMaXN0RWxlbWVudCwgSFRNTExJRWxlbWVudD4gaW1wbGVtZW50cyBEcmFnZ2FibGUge1xuICAgIHByaXZhdGUgcHJvamVjdDogUHJvamVjdDtcblxuICAgIGdldCBwZXJzb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0LnBlb3BsZSA9PSAxID8gYCR7dGhpcy5wcm9qZWN0LnBlb3BsZX0gcGVyc29uYCA6IGAke3RoaXMucHJvamVjdC5wZW9wbGV9IHBlcnNvbnNgO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGhvc3RJZDogc3RyaW5nLCBwcm9qZWN0OiBQcm9qZWN0KSB7XG4gICAgICAgIHN1cGVyKFwic2luZ2xlLXByb2plY3RcIiwgaG9zdElkLCBmYWxzZSwgcHJvamVjdC5pZCk7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG5cbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJhZ1N0YXJ0SGFuZGxlcihldmVudDogRHJhZ0V2ZW50KSB7XG4gICAgICAgIGV2ZW50LmRhdGFUcmFuc2ZlciEuc2V0RGF0YShcInRleHQvcGxhaW5cIiwgdGhpcy5wcm9qZWN0LmlkKTtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyIS5lZmZlY3RBbGxvd2VkID0gXCJtb3ZlXCI7XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJhZ0VuZEhhbmRsZXIoXzogRHJhZ0V2ZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRHJhZ0VuZFwiKTtcbiAgICB9XG5cbiAgICBjb25maWd1cmUoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIHRoaXMuZHJhZ1N0YXJ0SGFuZGxlcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLCB0aGlzLmRyYWdFbmRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZW5kZXJDb250ZW50KCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcImgyXCIpIS50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC50aXRsZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoM1wiKSEudGV4dENvbnRlbnQgPSB0aGlzLnBlcnNvbnMgKyBcIiBhc3NpZ25lZFwiO1xuICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInBcIikhLnRleHRDb250ZW50ID0gdGhpcy5wcm9qZWN0LmRlc2NyaXB0aW9uO1xuICAgIH1cbn1cbiIsIi8vIFByb2plY3QgTGlzdCBDbGFzc1xuXG5pbXBvcnQgeyBBdXRvYmluZCB9IGZyb20gXCIuLi9kZWNvcmF0b3JzL2F1dG9iaW5kXCI7XG5pbXBvcnQgeyBEcmFnVGFyZ2V0IH0gZnJvbSBcIi4uL21vZGVscy9kcmFnRHJvcFwiO1xuaW1wb3J0IHsgUHJvamVjdCwgUHJvamVjdFN0YXR1cyB9IGZyb20gXCIuLi9tb2RlbHMvcHJvamVjdFwiO1xuaW1wb3J0IHsgcHJvamVjdFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlL3Byb2plY3RTdGF0ZVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUHJvamVjdEl0ZW0gfSBmcm9tIFwiLi9wcm9qZWN0SXRlbVwiO1xuXG5leHBvcnQgY2xhc3MgUHJvamVjdExpc3QgZXh0ZW5kcyBDb21wb25lbnQ8SFRNTERpdkVsZW1lbnQsIEhUTUxFbGVtZW50PiBpbXBsZW1lbnRzIERyYWdUYXJnZXQge1xuICAgIGFzc2lnbmVkUHJvamVjdHM6IFByb2plY3RbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdHlwZTogXCJBY3RpdmVcIiB8IFwiRmluaXNoZWRcIikge1xuICAgICAgICBzdXBlcihcInByb2plY3QtbGlzdFwiLCBcImFwcFwiLCBmYWxzZSwgYCR7dHlwZX0tcHJvamVjdHNgKTtcbiAgICAgICAgdGhpcy5hc3NpZ25lZFByb2plY3RzID0gW107XG5cbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJhZ092ZXJIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRhdGFUcmFuc2ZlciAmJiBldmVudC5kYXRhVHJhbnNmZXIudHlwZXNbMF0gPT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBsaXN0RWwgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpITtcbiAgICAgICAgICAgIGxpc3RFbC5jbGFzc0xpc3QuYWRkKFwiZHJvcHBhYmxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJvcEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCkge1xuICAgICAgICBjb25zdCBwcm9qSWQgPSBldmVudC5kYXRhVHJhbnNmZXIhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpO1xuICAgICAgICBwcm9qZWN0U3RhdGUubW92ZVByb2plY3QocHJvaklkLCB0aGlzLnR5cGUgPT0gXCJBY3RpdmVcIiA/IFByb2plY3RTdGF0dXMuQWN0aXZlIDogUHJvamVjdFN0YXR1cy5GaW5pc2hlZCk7XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJhZ0xlYXZlSGFuZGxlcihfOiBEcmFnRXZlbnQpIHtcbiAgICAgICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ1bFwiKSE7XG4gICAgICAgIGxpc3RFbC5jbGFzc0xpc3QucmVtb3ZlKFwiZHJvcHBhYmxlXCIpO1xuICAgIH1cblxuICAgIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCB0aGlzLmRyYWdPdmVySGFuZGxlcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIHRoaXMuZHJhZ0xlYXZlSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCB0aGlzLmRyb3BIYW5kbGVyKTtcblxuICAgICAgICBwcm9qZWN0U3RhdGUuYWRkTGlzdGVuZXIoKHByb2plY3RzOiBQcm9qZWN0W10pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlbGV2YW50UHJvamVjdHMgPSBwcm9qZWN0cy5maWx0ZXIoKHByaikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gXCJBY3RpdmVcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJqLnN0YXR1cyA9PSBQcm9qZWN0U3RhdHVzLkFjdGl2ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByai5zdGF0dXMgPT0gUHJvamVjdFN0YXR1cy5GaW5pc2hlZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hc3NpZ25lZFByb2plY3RzID0gcmVsZXZhbnRQcm9qZWN0cztcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvamVjdHMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyQ29udGVudCgpIHtcbiAgICAgICAgY29uc3QgbGlzdElkID0gYCR7dGhpcy50eXBlfS1wcm9qZWN0cy1saXN0YDtcbiAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ1bFwiKSEuaWQgPSBsaXN0SWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaDJcIikhLnRleHRDb250ZW50ID0gdGhpcy50eXBlICsgXCIgUHJvamVjdHNcIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclByb2plY3RzKCkge1xuICAgICAgICBjb25zdCBsaXN0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLnR5cGV9LXByb2plY3RzLWxpc3RgKSEgYXMgSFRNTFVMaXN0RWxlbWVudDtcbiAgICAgICAgbGlzdEVsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgcHJqSXRlbSBvZiB0aGlzLmFzc2lnbmVkUHJvamVjdHMpIHtcbiAgICAgICAgICAgIG5ldyBQcm9qZWN0SXRlbSh0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpIS5pZCwgcHJqSXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQcm9qZWN0SW5wdXQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Byb2plY3RJbnB1dFwiXG5pbXBvcnQgeyBQcm9qZWN0TGlzdCB9IGZyb20gXCIuL2NvbXBvbmVudHMvcHJvamVjdExpc3RcIlxuXG5cbm5ldyBQcm9qZWN0SW5wdXQoKTtcbm5ldyBQcm9qZWN0TGlzdChcIkFjdGl2ZVwiKTtcbm5ldyBQcm9qZWN0TGlzdChcIkZpbmlzaGVkXCIpO1xuXG4iXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUlkIiwiaG9zdEVsZW1lbnRJZCIsImluc2VydEF0U3RhcnQiLCJuZXdFbGVtZW50SWQiLCJ0aGlzIiwidGVtcGxhdGVFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImhvc3RFbGVtZW50IiwiaW1wb3J0ZWRIdG1sIiwiaW1wb3J0Tm9kZSIsImNvbnRlbnQiLCJlbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJpZCIsImF0dGFjaCIsImluc2VydEFkamFjZW50RWxlbWVudCIsInZhbGlkYXRlIiwidmFsaWRhdGVhYmxlSW5wdXQiLCJpc1ZhbGlkIiwicmVxdWlyZWQiLCJ2YWx1ZSIsInRvU3RyaW5nIiwidHJpbSIsImxlbmd0aCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIkF1dG9iaW5kIiwiX3RhcmdldCIsIl8yIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiYmluZCIsIlByb2plY3RTdGF0dXMiLCJQcm9qZWN0IiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInBlb3BsZSIsInN0YXR1cyIsIlByb2plY3RTdGF0ZSIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwibGlzdGVuZXJGbiIsInB1c2giLCJzdXBlciIsInByb2plY3RzIiwiaW5zdGFuY2UiLCJhZGRQcm9qZWN0IiwibnVtT2ZQZW9wbGUiLCJuZXdQcm9qZWN0IiwiTWF0aCIsInJhbmRvbSIsIkFjdGl2ZSIsInVwZGF0ZUxpc3RlbmVycyIsIm1vdmVQcm9qZWN0IiwicHJvamVjdElkIiwibmV3U3RhdHVzIiwicHJvamVjdCIsImZpbmQiLCJwcmoiLCJzbGljZSIsInByb2plY3RTdGF0ZSIsImdldEluc3RhbmNlIiwiUHJvamVjdElucHV0IiwidGl0bGVJbnB1dCIsInF1ZXJ5U2VsZWN0b3IiLCJkZXNjcmlwdGlvbklucHV0IiwicGVvcGxlSW5wdXQiLCJjb25maWd1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwic3VibWl0SGFuZGxlciIsInJlbmRlckNvbnRlbnQiLCJnYXRoZXJVc2VySW5wdXQiLCJlbnRlcmVkVGl0bGUiLCJlbnRlcmVkRGVzY3JpcHRpb24iLCJlbnRlcmVkUGVvcGxlIiwiZGVzY3JpcHRpb25WYWxpZGF0ZSIsInBlb3BsZVZhbGlkYXRlIiwiYWxlcnQiLCJjbGVhcklucHV0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInVzZXJJbnB1dCIsIkFycmF5IiwiaXNBcnJheSIsImRlc2MiLCJQcm9qZWN0SXRlbSIsImhvc3RJZCIsImRyYWdTdGFydEhhbmRsZXIiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiZWZmZWN0QWxsb3dlZCIsImRyYWdFbmRIYW5kbGVyIiwiXyIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0Q29udGVudCIsInBlcnNvbnMiLCJQcm9qZWN0TGlzdCIsInR5cGUiLCJhc3NpZ25lZFByb2plY3RzIiwiZHJhZ092ZXJIYW5kbGVyIiwidHlwZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJkcm9wSGFuZGxlciIsInByb2pJZCIsImdldERhdGEiLCJGaW5pc2hlZCIsImRyYWdMZWF2ZUhhbmRsZXIiLCJyZW1vdmUiLCJyZWxldmFudFByb2plY3RzIiwiZmlsdGVyIiwicmVuZGVyUHJvamVjdHMiLCJsaXN0SWQiLCJpbm5lckhUTUwiLCJwcmpJdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==